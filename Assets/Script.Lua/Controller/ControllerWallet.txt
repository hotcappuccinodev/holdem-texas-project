-- Copyright(c) Cragon. All rights reserved.

---------------------------------------
ControllerWallet = class(ControllerBase)

---------------------------------------
function ControllerWallet:ctor(controller_data, controller_name)
    self.Address = nil
    self.Memo = nil
end

---------------------------------------
function ControllerWallet:OnCreate()
    -- 充值通知
    self.ControllerMgr.Rpc:RegRpcMethod1(self.MethodType.WalletRechargeNotify, function(data)
        self:S2cWalletRechargeNotify(data)
    end)
    -- 提现通知
    self.ControllerMgr.Rpc:RegRpcMethod1(self.MethodType.WalletWithdrawNotify, function(data)
        self:S2cWalletWithdrawNotify(data)
    end)
    -- 获取虚拟币地址通知
    self.ControllerMgr.Rpc:RegRpcMethod1(self.MethodType.WalletGetOrGenerateAddressNotify, function(data)
        self:S2cWalletGetOrGenerateAddressNotify(data)
    end)
    -- 获取交易记录通知
    self.ControllerMgr.Rpc:RegRpcMethod1(self.MethodType.WalletGetTransListNotify, function(data)
        self:S2cWalletGetTransListNotify(data)
    end)
    -- 验证提现地址有效性通知
    self.ControllerMgr.Rpc:RegRpcMethod1(self.MethodType.WalletWithdrawAddressValidNotify, function(data)
        self:S2cWalletWithdrawAddressValidNotify(data)
    end)
end

---------------------------------------
function ControllerWallet:OnDestroy()
    self.ViewMgr:UnbindEvListener(self)
end

---------------------------------------
function ControllerWallet:OnHandleEv(ev)
end

---------------------------------------
-- 充值请求
function ControllerWallet:RequestWalletRecharge()
    local data = WalletRechargeRequest:new(nil)
    data.MoneyType = MoneyType.BitCNY
    data.Amount = 100
    data.Channel = 'Azex'
    self.ControllerMgr.Rpc:RPC1(self.MethodType.WalletRechargeRequest, data:getData4Pack())
end

---------------------------------------
-- 提现请求
function ControllerWallet:RequestWalletWithdraw()
    local data = WalletWithdrawRequest:new(nil)
    data.MoneyType = MoneyType.BitCNY
    data.Amount = 100
    data.Channel = 'Azex'
    self.ControllerMgr.Rpc:RPC1(self.MethodType.WalletWithdrawRequest, data:getData4Pack())
end

---------------------------------------
-- 获取虚拟币地址请求
function ControllerWallet:RequestWalletGetOrGenerateAddress()
    local data = WalletGetOrGenerateAddressRequest:new(nil)
    data.MoneyType = MoneyType.BitCNY
    data.Amount = 100
    data.Channel = 'Azex'
    self.ControllerMgr.Rpc:RPC1(self.MethodType.WalletGetOrGenerateAddressRequest, data:getData4Pack())
end

---------------------------------------
-- 获取交易记录请求
function ControllerWallet:RequestWalletGetTransList()
    local data = WalletGetTransListRequest:new(nil)
    data.MoneyType = MoneyType.BitCNY
    data.Amount = 100
    data.Channel = 'Azex'
    self.ControllerMgr.Rpc:RPC1(self.MethodType.WalletGetTransListRequest, data:getData4Pack())
end

---------------------------------------
-- 验证提现地址有效性请求
function ControllerWallet:WalletWithdrawAddressValidRequest()
    local data = WalletWithdrawAddressValidRequest:new(nil)
    data.MoneyType = MoneyType.BitCNY
    data.Channel = 'Azex'
    data.Address = 'aaaaa'
    data.Memo = ''
    self.ControllerMgr.Rpc:RPC1(self.MethodType.WalletWithdrawAddressValidRequest, data:getData4Pack())
end

---------------------------------------
-- 充值通知
function ControllerWallet:S2cWalletRechargeNotify(data)
    local wallet_recharge_notify = WalletRechargeNotify:new(nil)
    wallet_recharge_notify:setData(data)
    print('Result=' .. wallet_recharge_notify.Result)
    print('Id=' .. wallet_recharge_notify.Id)
    print('MoneyType=' .. wallet_recharge_notify.MoneyType)
    print('Address=' .. wallet_recharge_notify.Address)
    print('Memo=' .. wallet_recharge_notify.Memo)
    print('Volume=' .. wallet_recharge_notify.Volume)
    print('Fee=' .. wallet_recharge_notify.Fee)

    local view = self.ViewMgr:GetView('Wallet')
    if view ~= nil then
        view:OnWalletRechargeNotify(data)
    end
end

---------------------------------------
-- 提现通知
function ControllerWallet:S2cWalletWithdrawNotify(data)
    local view = self.ViewMgr:GetView('Wallet')
    if view ~= nil then
        view:OnWalletWithdrawNotify(data)
    end
end

---------------------------------------
-- 获取虚拟币地址通知
function ControllerWallet:S2cWalletGetOrGenerateAddressNotify(data)
    local wallet_getorgenerate_address_notify = WalletGetOrGenerateAddressNotify:new(nil)
    wallet_getorgenerate_address_notify:setData(data)
    print('Address=' .. wallet_getorgenerate_address_notify.Address)
    print('Memo=' .. wallet_getorgenerate_address_notify.Memo)

    self.Address = wallet_getorgenerate_address_notify.Address
    self.Memo = wallet_getorgenerate_address_notify.Memo

    local view = self.ViewMgr:GetView('Wallet')
    if view ~= nil then
        view:OnWalletGetOrGenerateAddressNotify(wallet_getorgenerate_address_notify)
    end
end

---------------------------------------
-- 获取交易记录通知
function ControllerWallet:S2cWalletGetTransListNotify(data)
    local view = self.ViewMgr:GetView('Wallet')
    if view ~= nil then
        view:OnWalletGetTransListNotify(data)
    end
end

---------------------------------------
-- 验证提现地址有效性通知
function ControllerWallet:S2cWalletWithdrawAddressValidNotify(data)
    local wallet_withdrawaddressvalid_notify = WalletWithdrawAddressValidNotify:new(nil)
    wallet_withdrawaddressvalid_notify:setData(data)
    print('Address=' .. wallet_withdrawaddressvalid_notify.Address)
    print('Memo=' .. wallet_withdrawaddressvalid_notify.Memo)
    print('IsValid=' .. tostring(wallet_withdrawaddressvalid_notify.IsValid))

    local view = self.ViewMgr:GetView('Wallet')
    if view ~= nil then
        view:OnWalletWithdrawAddressValidNotify(data)
    end
end

---------------------------------------
ControllerWalletFactory = class(ControllerFactory)

function ControllerWalletFactory:GetName()
    return 'Wallet'
end

function ControllerWalletFactory:CreateController(controller_data)
    local ctrl_name = self:GetName()
    local ctrl = ControllerWallet.new(controller_data, ctrl_name)
    return ctrl
end