-- Copyright(c) Cragon. All rights reserved.

---------------------------------------
ControllerWallet = class(ControllerBase)

---------------------------------------
function ControllerWallet:ctor(controller_data, controller_name)
    self.VCoinMyInfo = nil
    self.VCoinCurrentInfo = nil
    self.ListRecord = nil
end

---------------------------------------
function ControllerWallet:OnCreate()
    -- 交易通知
    self.Rpc:RegRpcMethod2(self.MethodType.VCoinTransNotify, function(result, trans_record)
        self:S2cVCoinTransNotify(result, trans_record)
    end)
    -- 获取虚拟币地址通知
    self.Rpc:RegRpcMethod1(self.MethodType.VCoinGetOrGenerateAddressNotify, function(data)
        self:S2cVCoinGetOrGenerateAddressNotify(data)
    end)
    -- 获取交易记录通知
    self.Rpc:RegRpcMethod1(self.MethodType.VCoinGetTransListNotify, function(list_trans_record)
        self:S2cVCoinGetTransListNotify(list_trans_record)
    end)
    -- 验证提现地址有效性通知
    self.Rpc:RegRpcMethod1(self.MethodType.VCoinWithdrawAddressValidNotify, function(data)
        self:S2cVCoinWithdrawAddressValidNotify(data)
    end)
    -- 响应获取本人VCoin信息
    self.Rpc:RegRpcMethod1(self.MethodType.VCoinGetMyVCoinInfoResponse, function(list_myvcoininfo)
        self:S2cVCoinGetMyVCoinInfoResponse(list_myvcoininfo)
    end)
end

---------------------------------------
function ControllerWallet:OnDestroy()
    self.ViewMgr:UnbindEvListener(self)
end

---------------------------------------
function ControllerWallet:OnHandleEv(ev)
end

---------------------------------------
-- 提现请求
function ControllerWallet:RequestVCoinWithdraw()
    local data = VCoinWithdrawRequest:new(nil)
    data.Channel = 'Azex'
    data.Currency = 'btc'
    data.Volume = 1
    data.Address = ''
    data.Memo = ''
    self.Rpc:RPC1(self.MethodType.VCoinWithdrawRequest, data:getData4Pack())
end

---------------------------------------
-- 获取虚拟币地址请求
function ControllerWallet:RequestVCoinGetOrGenerateAddress()
    local currency = 'btc'
    local channel = 'Azex'
    self.Rpc:RPC2(self.MethodType.VCoinGetOrGenerateAddressRequest, currency, channel)
end

---------------------------------------
-- 获取交易记录请求
function ControllerWallet:RequestVCoinGetTransList()
    self.Rpc:RPC0(self.MethodType.VCoinGetTransListRequest)
end

---------------------------------------
-- 验证提现地址有效性请求
function ControllerWallet:RequestVCoinWithdrawAddressValid()
    local data = VCoinWithdrawAddressValidRequest:new(nil)
    data.Channel = 'Azex'
    data.Currency = 'btc'
    data.Address = 'aaaaa'
    data.Memo = ''
    self.Rpc:RPC1(self.MethodType.VCoinWithdrawAddressValidRequest, data:getData4Pack())
end

---------------------------------------
-- 请求获取本人VCoin信息
function ControllerWallet:RequestVCoinGetVCoinMyInfo()
    self.Rpc:RPC0(self.MethodType.VCoinGetMyVCoinInfoRequest)
end

---------------------------------------
-- 交易通知
function ControllerWallet:S2cVCoinTransNotify(result, data)
    local record = nil
    if data ~= nil then
        record = VCoinTransRecord:new(nil)
        VCoinTransRecord:setData(data)
    end

    local view = self.ViewMgr:GetView('Wallet')
    if view ~= nil then
        view:OnVCoinTransNotify(result, record)
    end
end

---------------------------------------
-- 获取虚拟币地址通知
function ControllerWallet:S2cVCoinGetOrGenerateAddressNotify(data)
    local vcoin_getorgenerate_address_notify = VCoinGetOrGenerateAddressNotify:new(nil)
    vcoin_getorgenerate_address_notify:setData(data)

    self.Address = vcoin_getorgenerate_address_notify.Address
    self.Memo = vcoin_getorgenerate_address_notify.Memo

    local view = self.ViewMgr:GetView('Wallet')
    if view ~= nil then
        view:OnVCoinGetOrGenerateAddressNotify(vcoin_getorgenerate_address_notify)
    end
end

---------------------------------------
-- 获取交易记录通知
function ControllerWallet:S2cVCoinGetTransListNotify(data)
    self.ListRecord = nil

    if data ~= nil then
        local t_l = {}
        for i, v in pairs(data) do
            local s_b = VCoinTransRecord:new(nil)
            s_b:setData(v)
            table.insert(t_l, s_b)
        end
        self.ListRecord = t_l
    end

    local view = self.ViewMgr:GetView('Wallet')
    if view ~= nil then
        view:OnVCoinGetTransListNotify()
    end
end

---------------------------------------
-- 验证提现地址有效性通知
function ControllerWallet:S2cWalletWithdrawAddressValidNotify(data)
    local wallet_withdrawaddressvalid_notify = WalletWithdrawAddressValidNotify:new(nil)
    wallet_withdrawaddressvalid_notify:setData(data)
    print('Address=' .. wallet_withdrawaddressvalid_notify.Address)
    print('Memo=' .. wallet_withdrawaddressvalid_notify.Memo)
    print('IsValid=' .. tostring(wallet_withdrawaddressvalid_notify.IsValid))

    local view = self.ViewMgr:GetView('Wallet')
    if view ~= nil then
        view:OnWalletWithdrawAddressValidNotify(wallet_withdrawaddressvalid_notify)
    end
end

---------------------------------------
-- 响应获取本人VCoin信息
function ControllerWallet:S2cVCoinGetMyVCoinInfoResponse(data)
    if data ~= nil then
        self.VCoinMyInfo = VCoinMyInfo:new(nil)
        self.VCoinMyInfo:setData(data)
        self.VCoinCurrentInfo = nil
        if self.VCoinMyInfo.ListItem ~= nil and #self.VCoinMyInfo.ListItem > 0 then
            self.VCoinCurrentInfo = self.VCoinMyInfo.ListItem[1]
        end
    end

    local view = self.ViewMgr:GetView('Wallet')
    if view ~= nil then
        view:OnVCoinGetMyVCoinInfoResponse()
    end
end

---------------------------------------
ControllerWalletFactory = class(ControllerFactory)

function ControllerWalletFactory:GetName()
    return 'Wallet'
end

function ControllerWalletFactory:CreateController(controller_data)
    local ctrl_name = self:GetName()
    local ctrl = ControllerWallet.new(controller_data, ctrl_name)
    return ctrl
end